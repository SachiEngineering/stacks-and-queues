
'''
❓ PROMPT
Oliver the Dog is missing his favorite hat and is asking his friends at the dog park if they've seen it. Each dog either has seen it or suggests a list of other dogs to ask. Return the name of the dog who has seen the hat. Oliver starts out by asking his best friend. This function will take two parameters. The first is a map of dogs to a list of their friends. The second is Oliver's best friend, who Oliver will ask first.

One of the most common uses of a queue is to keep a list of "work to be done". Just like doing housework, often new things get added to the to-do list while doing some other task. New jobs get added to the end of the queue, and when one is complete, the next one is taken from the top of the list.

As a follow-up, how would you handle it when there's circular knowledge? For example, Jono's suggestion is to ask Angus, and Angus' suggestion is to ask Jono. These 'cycles' aren't restricted to pairs of dogs, they can be of any size.

Example(s)
dogs = {
  'Carter': ['Fido', 'Ivy'],
  'Ivy': ["HAT"], // Ivy has seen the hat
  'Loki': ['Snoopy'],
  'Pepper': ['Carter'],
  'Snoopy': ['Pepper'],
  'Fido': []
}
findHat(dogs, 'Loki') == 'Ivy'
 

🔎 EXPLORE
List your assumptions & discoveries:
Q: Will one of the dogs have seen the hat?
A: Yes.
Q: Will there always be a way to get to the dog who's seen the hat?
A: No, if Oliver starts with the wrong dog, they may not know who else to ask.
Q: Are names case-sensitive?
A: Yes.

Insightful & revealing test cases:
-first person to ask is not in the map?
-a direct chain of dogs
-some dogs who don't know another dog who would know where the hat is
-a circular chain of knowledge (dead-end and none of those dogs know where the hat is)

🧠 BRAINSTORM
What approaches could work?
Algorithm 1:
Time: O(n) iterating through n number of dogs
Space: O()
 

📆 PLAN
Outline of algorithm #: 

-init queue
-append to queue, bestFriend
-append bestFriend's value to the queue.
-get value of current dog, append to queue
-get value of current dog, append to queue
    -check if value == Hat, if yes, return current dog


'''

# 🛠️ IMPLEMENT
# function findHat(dogs, bestFriend) {
# def findHat(dogs: dict, bestFriend: str) -> str:

def findHat(dogs: dict, bestFriend: str) -> str:
  askQueue = [bestFriend]
  dogsAlreadyAsked = set() 
  dogIndex = 0

  while dogIndex < len(askQueue):
    currentDog = askQueue[dogIndex]
    dogIndex += 1 #FIFO

    if currentDog in dogsAlreadyAsked:
      continue

    if len(dogs[currentDog]) > 0 and dogs[currentDog][0] == 'HAT':
      return currentDog

    dogsAlreadyAsked.add(currentDog)
    new_askQueue = dogs[currentDog]
    askQueue.extend(new_askQueue)

  return "Couldn't find the hat"


# 🧪 VERIFY ###############################################
# Run tests. Methodically debug & analyze issues.
dogs = {
    'Carter': ['Fido', 'Ivy'],
    'Ivy': ["HAT"], # Ivy has seen the hat
    'Loki': ['Snoopy'],
    'Pepper': ['Carter'],
    'Snoopy': ['Pepper'],
    'Fido': []
}
print(findHat(dogs, 'Loki') == "Ivy")
print(findHat(dogs, 'Snoopy') == "Ivy")
print(findHat(dogs, 'Ivy') == "Ivy")
print(findHat(dogs, 'Fido') == "Couldn't find the hat")

dogs = {
    'Ariel': ['Bork'],
    'Bork': ['Cassie'],
    'Cassie': ['Drex'],
    'Drex': ['Zoe'],
    'Zoe': ["HAT"],
}
print(findHat(dogs, "Ariel") == "Zoe")
print(findHat(dogs, "Bork") == "Zoe")
print(findHat(dogs, "Cassie") == "Zoe")
print(findHat(dogs, "Drex") == "Zoe")
print(findHat(dogs, "Zoe") == "Zoe")

dogs = {
    'Zoe': ['Jono'],
    'Jono': ['Angus'], # dead-end, circular knowledge
    'Angus': ['Jono'], # dead-end, circular knowledge
    'Paavo': ['Zoe', 'Oliver'],
    'Oliver': ["HAT"],
}
print(findHat(dogs, "Paavo") == "Oliver")
print(findHat(dogs, "Oliver") == "Oliver")
print(findHat(dogs, "Zoe") == "Couldn't find the hat")
print(findHat(dogs, "Angus") == "Couldn't find the hat")
print(findHat(dogs, "Jono") == "Couldn't find the hat")

dogs = {
  'Zoe': ['Jono'], # circular knowledge
  'Jono': ['Angus'], # circular knowledge
  'Angus': ['Paavo'], # circular knowledge
  'Paavo': ['Zoe', 'Oliver', 'Angus'], # can lead to circular knowledge
  'Oliver': ["HAT"],
}

print(findHat(dogs, "Paavo") == "Oliver")
print(findHat(dogs, "Oliver") == "Oliver")
print(findHat(dogs, "Zoe") == "Oliver")
print(findHat(dogs, "Angus") == "Oliver")
print(findHat(dogs, "Jono") == "Oliver")
